/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace FlightBooking {
  export type BookingStruct = {
    passenger: AddressLike;
    flightId: string;
    price: BigNumberish;
    timestamp: BigNumberish;
    isConfirmed: boolean;
  };

  export type BookingStructOutput = [
    passenger: string,
    flightId: string,
    price: bigint,
    timestamp: bigint,
    isConfirmed: boolean
  ] & {
    passenger: string;
    flightId: string;
    price: bigint;
    timestamp: bigint;
    isConfirmed: boolean;
  };
}

export interface FlightBookingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bookings"
      | "createBooking"
      | "getBooking"
      | "getLoyaltyPoints"
      | "loyaltyPoints"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BookingConfirmed"
      | "BookingCreated"
      | "PointsEarned"
  ): EventFragment;

  encodeFunctionData(functionFragment: "bookings", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createBooking",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getBooking", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getLoyaltyPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "loyaltyPoints",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "bookings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createBooking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBooking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLoyaltyPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loyaltyPoints",
    data: BytesLike
  ): Result;
}

export namespace BookingConfirmedEvent {
  export type InputTuple = [flightId: string];
  export type OutputTuple = [flightId: string];
  export interface OutputObject {
    flightId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BookingCreatedEvent {
  export type InputTuple = [
    flightId: string,
    passenger: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    flightId: string,
    passenger: string,
    price: bigint
  ];
  export interface OutputObject {
    flightId: string;
    passenger: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsEarnedEvent {
  export type InputTuple = [passenger: AddressLike, points: BigNumberish];
  export type OutputTuple = [passenger: string, points: bigint];
  export interface OutputObject {
    passenger: string;
    points: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FlightBooking extends BaseContract {
  connect(runner?: ContractRunner | null): FlightBooking;
  waitForDeployment(): Promise<this>;

  interface: FlightBookingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bookings: TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, bigint, boolean] & {
        passenger: string;
        flightId: string;
        price: bigint;
        timestamp: bigint;
        isConfirmed: boolean;
      }
    ],
    "view"
  >;

  createBooking: TypedContractMethod<
    [flightId: string, price: BigNumberish],
    [void],
    "payable"
  >;

  getBooking: TypedContractMethod<
    [flightId: string],
    [FlightBooking.BookingStructOutput],
    "view"
  >;

  getLoyaltyPoints: TypedContractMethod<
    [passenger: AddressLike],
    [bigint],
    "view"
  >;

  loyaltyPoints: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bookings"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, bigint, boolean] & {
        passenger: string;
        flightId: string;
        price: bigint;
        timestamp: bigint;
        isConfirmed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createBooking"
  ): TypedContractMethod<
    [flightId: string, price: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getBooking"
  ): TypedContractMethod<
    [flightId: string],
    [FlightBooking.BookingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLoyaltyPoints"
  ): TypedContractMethod<[passenger: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "loyaltyPoints"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "BookingConfirmed"
  ): TypedContractEvent<
    BookingConfirmedEvent.InputTuple,
    BookingConfirmedEvent.OutputTuple,
    BookingConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "BookingCreated"
  ): TypedContractEvent<
    BookingCreatedEvent.InputTuple,
    BookingCreatedEvent.OutputTuple,
    BookingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PointsEarned"
  ): TypedContractEvent<
    PointsEarnedEvent.InputTuple,
    PointsEarnedEvent.OutputTuple,
    PointsEarnedEvent.OutputObject
  >;

  filters: {
    "BookingConfirmed(string)": TypedContractEvent<
      BookingConfirmedEvent.InputTuple,
      BookingConfirmedEvent.OutputTuple,
      BookingConfirmedEvent.OutputObject
    >;
    BookingConfirmed: TypedContractEvent<
      BookingConfirmedEvent.InputTuple,
      BookingConfirmedEvent.OutputTuple,
      BookingConfirmedEvent.OutputObject
    >;

    "BookingCreated(string,address,uint256)": TypedContractEvent<
      BookingCreatedEvent.InputTuple,
      BookingCreatedEvent.OutputTuple,
      BookingCreatedEvent.OutputObject
    >;
    BookingCreated: TypedContractEvent<
      BookingCreatedEvent.InputTuple,
      BookingCreatedEvent.OutputTuple,
      BookingCreatedEvent.OutputObject
    >;

    "PointsEarned(address,uint256)": TypedContractEvent<
      PointsEarnedEvent.InputTuple,
      PointsEarnedEvent.OutputTuple,
      PointsEarnedEvent.OutputObject
    >;
    PointsEarned: TypedContractEvent<
      PointsEarnedEvent.InputTuple,
      PointsEarnedEvent.OutputTuple,
      PointsEarnedEvent.OutputObject
    >;
  };
}
